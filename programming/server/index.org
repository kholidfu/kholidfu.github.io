#+TITLE: server dan command line - labs127.io and me
#+AUTHOR: Kholid Fuadi
#+DATE: <2016-03-08 Tue>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../../stylesheet.css" />
#+STARTUP: indent


* <<sec:1>>Mencegah SSH Timeout
  Bagi Anda yang sering melakukan koneksi SSH ke server, tentu sangat
  mengganggu bukan? Solusinya mudah, tambahkan atau buat konfigurasi baru
  di berkas =~/.ssh/config=:

  #+BEGIN_SRC text
    Host *
      ServerAliveInterval 10
  #+END_SRC

* <<sec:2>>Membuat / Menambah swap di Ubuntu
  Terkadang karena keterbatasan /memory/, kita tidak dapat melakukan
  instalasi paket atau /library/ tertentu di server. Hal ini pernah penulis
  alami ketika akan memasang /library/ =pandas=. Daripada harus upgrade 
  droplet, saya coba membuat swap di server tersebut, dan setelah membuat
  swap sebesar 1GB, library tersebut berhasil terpasang dengan sukses.

  Berikut ini langkah-langkahnya:
  #+BEGIN_SRC sh
    # create new partition 1M * 1024 = 1GB
    dd if=/dev/zero of=/swapfile bs=1M count=1024
    # set as swap
    mkswap /swapfile
    # activate the swap once
    swapon /swapfile
    # add to /etc/fstab to auto load when reboot [optional]
    /swapfile swap swap defaults 0 0
  #+END_SRC
* <<sec:3>>Set Locale di Ubuntu Server
Ini hal wajib yang perlu dilakukan ketika setup server, karena jika
belum diset, biasanya ada beberapa masalah yang muncul, misal tidak
mau login ke mongo console atau psql (postgresql).

Cara untuk setting locale (ubuntu) adalah dengan menyunting berkas 
=/etc/default/locale= dan isikan baris config berikut:

#+BEGIN_SRC text
  LC_ALL="en_US.UTF-8"
  LANG="en_US.UTF-8"
  LANGUAGE="en_US.UTF-8"
#+END_SRC

Selanjutnya silakan re-login atau reboot, agar setting berlaku.
* <<sec:4>>Mengatur depth level command tree
Perintah berikut ini membatasi kedalaman /output/ perintah =tree=
menjadi maksimal 2 level saja.
#+BEGIN_SRC sh
tree -L 2 somedir/
#+END_SRC
* <<sec:5>>Lock Package Version di Linux Mint
Salah satu kelebihan menggunakan Linux adalah mudahnya melakukan
/update/ paket melalui /package manager/ yang biasanya sudah
disediakan secara /default/ oleh tiap-tiap distro. Namun ini juga
terkadang membawa masalah tersendiri, kenapa?

Misalnya nih, saya baru saja membeli VGA Card merk ATI. Karena
dukungan /driver/ yang tidak terlalu bagus (dibanding NVIDIA),
terkadang ketika ada perubahan versi /kernel/, maka /driver/ yang
sudah terpasang menjadi tidak berjalan secara sempurna.

Untuk itu, setelah konfigurasi mapan, saya berpikir untuk me-lock
versi dari kernel yang saya gunakan. Dan ternyata Linux menyediakan
fitur untuk itu.

Kalau Anda pengguna Ubuntu (atau Mint), Anda dapat melakukan langkah
berikut:

#+BEGIN_SRC text
Go to System -> Administration -> Synaptic Package Manager.

Highlight the package and choose menu Package -> Lock Version.
#+END_SRC

Jika sudah, maka paket tersebut akan ada simbol gembok dan berwarna
merah, seperti yang terlihat dalam tangkapan layar berikut:

#+ATTR_HTML: :title :alt :style width:85%;
[[file:img/synaptic.png]]

*Note:*

This may not applied to server which need to be as up-to-date as
possible.
* <<sec:6>>Setting git dan SSH key
Capek kan kalo harus ngetik /username/ /password/ setiap kali =push=
atau =pull=? Biar tidak ngetik terus, kita membuat SSH key
saja. Caranya sebagai berikut:

*Membuat SSH key*
#+BEGIN_SRC sh
ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
#+END_SRC

Selanjutnya ikuti saja petunjuknya, kalau saya memilih menyimpan key
di =~/.ssh/id_rsa.pub=, /which is default/. Untuk /passphrase/,
silakan diisi sesuai keinginan (kosong pun tidak masalah, tapi
sebaiknya diisi).

*Menambahkan SSH key ke git* 

Untuk github, silakan menuju profile, kemudian Settings, klik SSH
keys, kemudian Add SSH key.

Title bebas mau dinamai apa saja, tapi sebaiknya berupa string yang
terkait dengan mesin kita, misal =bantengpc=, untuk memudahkan
identifikasi saja sih, bahwa ssh_key ini kepunyaan mesin =bantengpc=.

Salin isi dari =~/.ssh/id_rsa.pub= kemudian /paste/ ke input
"Key". Kemudian klik Add key.

*Testing*

Ketik perintah berikut:
#+BEGIN_SRC sh
ssh -T git@github.com
#+END_SRC

Untuk pertama kali, maka akan muncul pesan konfirmasi yang isinya
kurang lebih sebagai berikut:
#+BEGIN_SRC text
The authenticity of host 'github.com (207.97.227.239)' can't be established.
# RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.
# Are you sure you want to continue connecting (yes/no)?
#+END_SRC

Jawab saja /yes/, kemudian jika berhasil akan muncul keterangan sebagai berikut:
#+BEGIN_SRC text
Hi kholidfu! You've successfully authenticated, but GitHub does not
# provide shell access.
#+END_SRC

Selanjutnya yang tidak kalah penting adalah memastikan bahwa url
remote, berbentuk seperti ini:
#+BEGIN_SRC text
[remote "origin"]
	url = git@github.com:kholidfu/kholidfu.github.io.git
#+END_SRC

Ini berarti kita bisa menggunakan ssh key untuk login dan push. Tetapi
jika format url masih seperti ini:

#+BEGIN_SRC text
[remote "origin"]
    url = https://github.com/kholidfu/kholidfu.github.io.git
#+END_SRC

Silakan disesuaikan, karena format di atas melakukan autentikasi
menggunakan format usermame/password.
* <<sec:7>>Custom domain di localhost
Seringnya Anda melihat menggunakan IP 127.0.0.1 atau localhost saja,
bagaimana membuatnya menjadi seolah-olah punya nama, seperti misalnya
=test.com= atau =banteng.app=?

Tambahkan atau sunting berkas =/etc/hosts=:
#+BEGIN_SRC text
127.0.0.1 localhost banteng.app test.com
#+END_SRC

Sekarang localhost dapat Anda akses juga menggunakan =test.com= atau
=banteng.app=.
* <<sec:8>>Melihat paket yang terpasang di Ubuntu/Mint
Misal saya ingin mencari apakah paket =emacs= sudah terpasang di mesin
belum, jalankan perintah berikut:
#+BEGIN_SRC sh
dpkg -l | grep emacs
#+END_SRC
Perintah =dpkg -l= berarti melihat semua daftar paket yang terpasang,
kemudian kita lakukan filter dengan menggunakan perintah =grep=.

Alternatif lainnya, kita juga bisa menggunakan perintah berikut:
#+BEGIN_SRC sh
apt-cache search emacs
#+END_SRC

Maka akan muncul semua paket yang /terkait/ dengan paket yang kita
inginkan, dalam hal ini =emacs=.
* <<sec:9>>Docker di Linux Mint 17.1
Berikut ini cara install docker di Mint 17.1
#+BEGIN_SRC sh
sudo apt-get install docker.io
sudo apt-get install apparmor lxc cgroup-lite
sudo usermod -aG docker ${USER}
sudo service docker start
#+END_SRC
<<<<<<< HEAD
* <<sec:10>>Block IP di Ubuntu Server dengan ufw
Ada IP yang ingin Anda blok dari server Anda? Anda dapat menggunakan
iptables, tapi ada aplikasi yang lebih mudah (sebenarnya hanya
interface dari iptables juga sih), yakni =ufw=.

Berikut ini cara blok IP:
#+BEGIN_SRC sh
# install dulu kalau belum ada
sudo apt-get install ufw
# pastikan port 22 untuk ssh tetep dibuka
sudo ufw allow ssh
# block ip
sudo ufw deny from {ip-address-here} to any
# lihat status untuk memastikan blocking bekerja
sudo ufw status
# Berikut ini contoh outputnya:

Status: active

To                         Action      From
--                         ------      ----
Anywhere                   DENY        121.189.37.17
22                         ALLOW       Anywhere
22 (v6)                    ALLOW       Anywhere (v6)
#+END_SRC

Referensi:

[[http://www.cyberciti.biz/faq/how-to-block-an-ip-address-with-ufw-on-ubuntu-linux-server/][cyberciti.biz]]
=======
* <<sec:10>>nginx gagal restart
Pernah mengalami? ketika Anda menjalankan perintah =sudo service nginx
restart= dan hasilnya /FAIL/? Apa yang terjadi? Bagaimana cara
memeriksa penyebab terjadinya /error/?

Jalankan perintah berikut:
#+BEGIN_SRC sh
  sudo tail -f /var/log/nginx/error.log
#+END_SRC

Amati log, dan coba /googling/... Happy coding...

* <<sec:11>>Menambahkan ssh key di macosx
Setup project selesai, sekarang waktunya membuat repo, push dan
selesai...  Teorinya seperti itu, namun apa daya, ternyata ada
permasalahan yang muncul. Mesin yang kita gunakan belum terdaftar di
git server. Solusinya adalah mendaftarkan mesin kita. Ok, mari kita
mulai.

Asumsi mesin yang digunakan adalah macbookpro dengan os macosx el
capitan (seharusnya tidak ada perbedaan, masih satu unix family dengan
linux).

Buka terminal Anda, tambahkan baris berikut di =~/.ssh/config=:

#+BEGIN_SRC text
  Host bitbucket.org
      IdentityFile ~/.ssh/id_rsa
#+END_SRC

Kemudian jalankan perintah berikut:

#+BEGIN_SRC sh
  ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
#+END_SRC

Kemudian muncul prompt menanyakan di mana kita akan menyimpan key,
untuk kasus macosx, secara default akan berada di:

=/Users/you/.ssh/id_rsa=

Muncul lagi prompt menanyakan password, saya prefer untuk empty saja.

Key sudah ter-generate, tahap selanjutnya adalah menambahkan key
tersebut ke bitbucket atau github. Sebelumnya mari kita copy key yang
kita punya, dengan cara:

#+BEGIN_SRC sh
  pbcopy < ~/.ssh/id_rsa.pub
#+END_SRC

Perintah di atas adalah menyalin key ke clipboard via commandline.

Buka bitbucket atau github, cari halaman dimana kita bisa menambahkan
SSH key. Setelah ketemu, paste key.. Dan mari kita push ulang.

Happy git-ing... :)
* <<sec:12>>Mengubah direktori virtualenv
Suatu ketika kita ingin mengubah nama direktori dari virtual
environment yang sudah kita buat sebelumnya, bisakah? Bisa!

Berikut ini caranya:

Sunting berkas =bin/activate=, cari baris yang berhubungan dengan path
lama kita, dan ubah ke yang baru.

#+BEGIN_SRC sh
  # path berikut akan kita ganti dengan /agcimg2
  VIRTUAL_ENV="/vagrant_data/agcimg"
#+END_SRC

Sunting berkas =bin/pip=, pada baris paling atas, ubah path python
interpreter ke path yang baru.

#+BEGIN_SRC sh
  # path berikut kita ganti ke /agcimg2/bin/python
  #!/vagrant_data/agcimg/bin/python
#+END_SRC

Dan yang terakhir, jika Anda juga menggunakan git sebagai version
control, sunting juga berkas =.git/config= dan cari baris yang
mengandung path ke direktori lama, ubahlah ke path yang baru.

#+BEGIN_SRC text
  # path berikut akan kita ganti ke agcimg2.git
  url = git@bitbucket.org:kholidfu/agcimg.git
#+END_SRC
* <<sec:13>>Setup PostgreSQL di vagrant
Perlu perlakuan khusus, karena secara default, username adalah
vagrant. Berikut ini adalah langkah-langkahnya:

#+BEGIN_SRC sh
  sudo -u postgres -i
#+END_SRC

Anda akan masuk ke prompt postgre, selanjutnya ketikkan

#+BEGIN_SRC sh
  psql
#+END_SRC

Kemudian, tambahkan user vagrant, ada 3 cara:

#+BEGIN_SRC sh
  CREATE ROLE vagrant LOGIN;  # tanpa password
  CREATE USER vagrant WITH PASSWORD 'password';  # dengan password cara 1
  CREATE USER vagrant WITH LOGIN PASSWORD 'password';  # dgn passwd cara 2
#+END_SRC

Selesai!
>>>>>>> 9fae1d5b3cf8bee673a38c9a5f1a5ed7277fe5a8
